const u=(r,a)=>{var n={},s={},i={};for(let o of a){const t=o.getTableName();let l=o.getSchema();Array.isArray(l)&&l.map(e=>{if(!e.version||!e.columns){console.warn("Invalid schema configuraiont: ",o.getTableName(),e);return}n[e.version]||(n[e.version]={},s[e.version]=[]),n[e.version][t]=e.columns,i[t]=e.columns,typeof e.upgrade=="function"&&s[e.version].push(e.upgrade)})}for(let o in n){for(let l of a){const e=l.getTableName();n[o].hasOwnProperty(e)&&(n[o][e]=i[e])}r.version(o).stores(n[o]).upgrade(function(){s[o].map(l=>{l==null||l.call(null,r)})})}for(let o of a){const t=o.getTableName();o.setTableConnection(r[t]),o.getTableConnection().mapToClass(o)}};module.exports=u;export{u as setup};
